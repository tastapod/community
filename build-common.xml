<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant" default="test">

  <!-- ============================= Initialisation ============================= -->

  <target name="-init" description="Ivy-independent initialization">
    <patternset id="metainf-files">
      <include name="*.txt" />
      <exclude name="design-discussion.txt,tech-debt.txt" />
    </patternset>
  </target>

  <property name="ivy-version" value="2.2.0" />
  <property name="ivy-install-dir" location="${user.home}/.ivy2/install" />
  <property name="ivy-jar" location="${ivy-install-dir}/ivy-${ivy-version}.jar" />
  <available property="ivy-installed" file="${ivy-jar}" />
  <target name="-bootstrap-ivy" unless="ivy-installed">
    <mkdir dir="${ivy-install-dir}" />
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy-version}/ivy-${ivy-version}.jar"
      dest="${ivy-jar}" usetimestamp="true" ignoreerrors="false"/>
  </target>
  
  <target name="-load-ivy" depends="-bootstrap-ivy">
    <taskdef uri="antlib:org.apache.ivy.ant" classpath="${ivy-jar}"/>
  </target>

  <target name="-init-ivy" depends="-init,-load-ivy" description="Set up Ivy-related paths">
    <dirname property="common-basedir" file="${ant.file.common}" />
    <ivy:settings file="${common-basedir}/ivy-settings.xml" />
    <ivy:resolve resolveId="main" log="quiet" />
    <ivy:cachepath pathid="ivy.compile-classpath" conf="default" />
    <ivy:cachepath pathid="ivy.test-classpath" conf="test" />
    <property name="module" value="${ant.project.name}" />
    <property name="version" value="${ivy.revision}" />
    <!-- TODO build in target rather than tmp once build is good -->
    <property name="jars-dir" value="tmp/artifacts/jars" />
    <property name="module-jar" location="${jars-dir}/${module}.jar" />
    <property name="tests-jar" location="${jars-dir}/${module}-tests.jar" />
    <property name="source-jar" location="${jars-dir}/${module}-source.jar" />
    <property name="javadoc-jar" location="${jars-dir}/${module}-javadoc.jar" />
    <path id="compile-classpath">
      <path refid="ivy.compile-classpath" />
      <pathelement location="tmp/supporting-classes" />
      <pathelement location="${java.home}/../lib/tools.jar" />
    </path>
    <path id="test-classpath">
      <path refid="compile-classpath" />
      <path refid="ivy.test-classpath" />
      <pathelement location="${module-jar}" />
    </path>
  </target>

  <target name="debug" depends="-init-ivy">
      <property name="compile-classpath" refid="compile-classpath" />
      <property name="test-classpath" refid="test-classpath" />
      <echoproperties />
      <ivy:report />
  </target>

  <!-- ============================= Code gen ============================= -->

  <target name="prepare-sources" depends="-init-ivy">
    <exec osfamily="windows" executable="git.cmd" outputproperty="git-describe">
      <arg value="describe" />
    </exec>
    <exec osfamily="unix" executable="git" outputproperty="git-describe">
      <arg value="describe" />
    </exec>
    <mkdir dir="tmp/generated" />
    <copy todir="tmp/generated">
      <fileset dir="src/template" erroronmissingdir="false" />
      <filterset>
        <filter token="artifactId" value="${module}" />
        <filter token="version"    value="${version}" />
        <filter token="revision"   value="${git-describe}" />
      </filterset>
    </copy>
    <mkdir dir="tmp/classes" />
    <copy todir="tmp/classes">
      <fileset dir="src/main/resources" erroronmissingdir="false" />
    </copy>
  </target>

  <!-- ============================= Compile ============================= -->

  <condition property="has-annotation-processors">
    <isreference refid="annotation-processors" />
  </condition>

  <target name="compile-annotation-processors" depends="-init-ivy" if="has-annotation-processors"
      description="Resolve chicken-and-egg problem with compiling annotation processors">
    <property name="annotation-processors" refid="annotation-processors" />
    <echo message="annotation-processors=${annotation-processors}" />
    <mkdir dir="tmp/classes" />
    <mkdir dir="tmp/supporting-classes" />
    <javac destdir="tmp/classes"
           srcdir="src/main/java:tmp/generated/java"
           classpathref="compile-classpath"
           includeantruntime="false"
           debug="true">
      <compilerarg value="-proc:none" />
      <patternset refid="annotation-processors" />
    </javac>
  </target>

  <target name="set-annotation-processors-pattern" unless="has-annotation-processors"
      description="Define empty pattern set if there are no annotation processors">
    <patternset id="annotation-processors" />
  </target>

  <target name="prepare-annotation-processors"
      depends="compile-annotation-processors,set-annotation-processors-pattern" />

  <target name="compile-java" depends="prepare-sources,prepare-annotation-processors"
      description="compile the module">
    <mkdir dir="tmp/classes" />
    <mkdir dir="tmp/generated/java" />
    <javac destdir="tmp/classes"
           srcdir="src/main/java:tmp/generated/java"
           classpathref="compile-classpath"
           includeantruntime="false"
           debug="true">
      <patternset>
        <invert><patternset refid="annotation-processors" /></invert>
      </patternset>
    </javac>
  </target>

  <target name="build-module-jar" depends="compile-java" description="build the module jar">
    <mkdir dir="${jars-dir}" />
    <jar file="${module-jar}" basedir="tmp/classes">
      <metainf dir=".">
        <patternset refid="metainf-files" />
      </metainf>
    </jar>
  </target>

  <!-- ============================= Test ============================= -->

  <target name="build-tests-jar" depends="build-module-jar" description="compile the tests">
    <mkdir dir="tmp/test-classes" />
    <copy todir="tmp/test-classes">
      <fileset dir="src/test/resources" erroronmissingdir="false" />
    </copy>
    <javac srcdir="src/test/java"
           destdir="tmp/test-classes"
           classpathref="test-classpath"
           includeantruntime="false"
           debug="true" />
    <jar file="${tests-jar}" basedir="tmp/test-classes" />
  </target>

  <target name="run-tests" depends="build-tests-jar" description="run the tests">
    <mkdir dir="tmp/reports" />
    <mkdir dir="target/test-data" />
    <mkdir dir="target/var" />
    <junit printsummary="yes"
           haltonfailure="yes"
           maxmemory="300m">
      <classpath>
        <path refid="test-classpath" />
        <pathelement location="${tests-jar}" />
      </classpath>
      <formatter type="plain"/>
      <batchtest fork="yes" todir="tmp/reports">
        <fileset dir="tmp/test-classes">
          <include name="**/Test*.class"/>
          <include name="**/*Tests.class"/>
          <exclude name="**/*$*.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- ============================= Sources ============================= -->

  <target name="build-source-jar" depends="prepare-sources" description="assemble the sources">
    <mkdir dir="${jars-dir}" />
    <jar file="${source-jar}">
      <fileset dir="src/main/java" />
      <fileset dir="src/main/resources" erroronmissingdir="false" />
      <fileset dir="tmp/generated/java" erroronmissingdir="false" />
      <metainf dir=".">
        <patternset refid="metainf-files" />
      </metainf>
    </jar>
  </target>

  <target name="build-javadoc-jar" depends="-init-ivy">
    <mkdir dir="tmp/javadoc" />
    <property name="cc" refid="compile-classpath" /><echo message="Classpath=${cc}" />
    <javadoc sourcepath="src/main/java"
             destdir="tmp/javadoc"
             packagenames="org.neo4j.*"
             classpathref="test-classpath"
             verbose="false" />
  </target>

  <!-- ============================= Publish ============================= -->

  <target name="publish-artifacts" depends="-init-ivy">
    <ivy:resolve log="quiet" />
    <echo message="Publishing ${ivy.module}" />
    <ivy:publish resolver="local"
                 overwrite="true"
                 artifactspattern="tmp/artifacts/[type]s/[artifact].[ext]" />
  </target>


  <target name="clean">
    <delete dir="tmp" />
    <delete dir="distrib" />
  </target>

  <target name="build" depends="build-module-jar" />
  <target name="test" depends="build-tests-jar,run-tests" />
  <target name="publish" depends="build,build-tests-jar,build-source-jar,build-javadoc-jar,publish-artifacts" />
  <target name="all" depends="build,test,publish" />
  <target name="rebuild" depends="clean,build" />
</project>
